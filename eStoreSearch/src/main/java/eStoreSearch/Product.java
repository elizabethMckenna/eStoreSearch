/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eStoreSearch;

import java.util.StringTokenizer;



public class Product {


    StringTokenizer tokenizer;


    private String productID = new String();  //must be a string to keep leading zeros    
    private String description = new String();                                          
    private double price;
    private int year;                                                                  

    // default values for non-required strings
    double defaultPrice = 0;


    /* * * * * * * * * * * * * CONSTRUCTORS * * * * * * * * * * * * */
    public Product(Product original) // copy constructor
    {
        if (original == null) {
            System.out.println("Fatal error.");
            System.exit(0);
        }
        productID = original.productID;
        description = original.description;
        price = original.price;
        year = original.year;
    }

    public Product() {
            productID = "";
            description = "";
            price = defaultPrice;
            year = 0;  
    }

    public Product(String productID, String description, double price, int year) throws Exception {
        //if any mutators return false
        if (!(this.setProductID(productID) && this.setDescription(description) && this.setPrice(price) && this.setYear(year))){
            throw new Exception ("m");
        }
        return;
    }



/** 
 * @return String
 */
/* * * * * * * * * * * * * * GETTERS * * * * * * * * * * * * * */
    public String getProductID(){
        return productID;
    }
    
    
    /** 
     * @return String
     */
    public String getDescription(){
        return description;
    }
    
    
    /** 
     * @return double
     */
    public double getPrice(){
        return price;
    }

    
    /** 
     * @return int
     */
    public int getYear(){
        return year;
    }
    

/** 
 * @param productID
 * @return boolean
 */
/* * * * * * * * * * * * * * SETTERS * * * * * * * * * * * * * */
public boolean setProductID(String productID) {
    boolean allDig = true;
    if (productID == null){
        return false;
    }
    tokenizer = new StringTokenizer(productID);
    if (!(tokenizer.hasMoreTokens())){
        return false;
    }

    if (productID.length() == 6) //productID must be 6 digits
    {
        //check all chars in ID are digits 
        for (int i = 0; i < 6; i++){
            if ( !(productID.charAt(i) >= 48 && productID.charAt(i) <= 57) ) {
                allDig = false;
                break;
            }
        }
        if (allDig == true){
            this.productID = productID;
            return true;
        }
        else {
            return false;
        }
    } else {
        return false;
    }
}


/** 
 * @param description
 * @return boolean
 */
public boolean setDescription(String description){
    
    //required field, must not be NULL
    if ( ((description == null))  ){
        return false;
    }
    tokenizer = new StringTokenizer(description);
    if (!(tokenizer.hasMoreTokens())){
        return false;
    }
    else {
        this.description = description;
        return true;
    }
}


/** 
 * @param price
 * @return boolean
 */
public boolean setPrice (double price){
    //not a required field.
    if (price >= 0) //price must not be negative (if 0, book is free)
    {
        this.price = price;
        return true;
    }
    else {
        return false;
    }
}


/** 
 * @param priceIn
 * @return boolean
 */
public boolean setPrice (String priceIn){
    if (priceIn == null) {
        return false;
    }
    tokenizer = new StringTokenizer(priceIn);
    if (!(tokenizer.hasMoreTokens())){
        return false;
    }

    for (int i = 0; i < priceIn.length()-1; i++){
        if ( !(priceIn.charAt(i) >= 48 && priceIn.charAt(i) <= 57) && !(priceIn.charAt(i) == '.') ) {
            System.out.println("Error_setPrice: Not all chars in string are numerical digits.");
            return false;
        }
    }
    double price = Double.parseDouble(priceIn);
    if (price >= 0) //price must not be negative (if 0, book is free)
    {
        this.price = price;
        return true;
    }
    else {
        return false;
    }
}


/** 
 * @param year
 * @return boolean
 */
public boolean setYear (int year){
    //required field
    if (year >= 1000 && year<= 9999){
        this.year = year;
        return true;
    }
    else {
        return false;
    }
}


/** 
 * @param yearIn
 * @return boolean
 */
public boolean setYear (String yearIn){
    if (yearIn == null){
        return false;
    }
    tokenizer = new StringTokenizer(yearIn);
    if (!(tokenizer.hasMoreTokens())){
        return false;
    }
    for (int i = 0; i < yearIn.length()-1; i++){
        if ( !(yearIn.charAt(i) >= 48 && yearIn.charAt(i) <= 57) ) {
            System.out.println("Error_setYear: Not all chars in string are numerical digits.");
            return false;
        }
    }
    int year = Integer.parseInt(yearIn);
    
    if (year >= 1000 && year<= 9999){
        this.year = year;
      //  System.out.println("year is: " + year);
        return true;
    }
    else {
        return false;
    }
}

  

/** 
 * @return String
 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

public String toString(){
    return ("ProductID:  " + productID 
           + "\nDesciption:  " + description 
           + "\nPrice:  $" + price + "\nYear:  " 
           + year + "\n");
}



/** 
 * @param other
 * @return boolean
 */
public boolean equals(Object other){
    if (other == null){
        return false;
    }
    else if (getClass() != other.getClass()) {
        return false;
    }
    else {
        return (productID.equals(((Product)other).productID) && description.equalsIgnoreCase(((Product)other).description) && price == ((Product)other).price && year == ((Product)other).year);
    }
}

    
    /** 
     * @param args
     */
    /* * * * * * * * * * * * * * * MAIN * * * * * * * * * * * * * * */
    public static void main(String[] args) {
       
       
    }
}
