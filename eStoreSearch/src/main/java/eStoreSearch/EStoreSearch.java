/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eStoreSearch;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;



public class EStoreSearch extends JFrame
implements ActionListener
{

    /**
     *
     */
    private static final long serialVersionUID = 1L;

















    
private static EStore eStore = new EStore();
private static HashMap<String, ArrayList<Integer>> keyWordHash = new HashMap<String, ArrayList<Integer>>();

public static final int WIDTH = 800;
public static final int HEIGHT = 600;
public static final int LINES = 15;
public static final int CHAR_PER_LINE = 30;

private static int menuOption = 0;
private static boolean filenameGiven = false;
private static String fileName = null;


private JPanel introScreenPanel;
private JTextArea welcomeMessage;

private JPanel addProductPanel;
private JPanel addInputPanel;
private JPanel addTextFieldPanel;
private JLabel addTitleLabel;

private JPanel outputDisplayPanel;
private JLabel outputDisplayTitle;
private JTextArea outputDisplay;
private JScrollPane outputScrollPane;

private JPanel buttonEnterPanel;
private JButton resetButton;
private JButton submitButton;

private String[] typeStrings = { "Book", "Electronic" };
private JComboBox typeComboBox = new JComboBox(typeStrings);
private JLabel typeFieldLabel = new JLabel("Type:    ");
private JPanel typeInputPanel = new JPanel();

private String productID;
private JTextField productIDTextField = new JTextField(" ", 22);
private JLabel productIDFieldLabel = new JLabel("ProductID:    ");
private JPanel productIDInputPanel = new JPanel();


private String description;
private JTextField descriptionTextField = new JTextField(" ", 22);
private JLabel descriptionFieldLabel = new JLabel("Description: ");
private JPanel descriptionInputPanel = new JPanel();

private String priceString;
private JTextField priceTextField = new JTextField(" ", 22);
private JLabel priceFieldLabel = new JLabel("Price:            ");
private JPanel priceInputPanel = new JPanel();

private String yearString;
private JTextField yearTextField = new JTextField(" ", 22);
private JLabel yearFieldLabel = new JLabel("Year:             ");
private JPanel yearInputPanel = new JPanel();

private String maker;
private JTextField makerTextField = new JTextField(" ", 22);
private JLabel makerFieldLabel = new JLabel("Maker:          ");
private JPanel makerInputPanel = new JPanel();

private String authors;
private JTextField authorsTextField = new JTextField(" ", 22);
private JLabel authorsFieldLabel = new JLabel("Authors:       ");
private JPanel authorsInputPanel = new JPanel();

private String publisher;
private JTextField publisherTextField = new JTextField(" ", 22);
private JLabel publisherFieldLabel = new JLabel("Publisher:     ");
private JPanel publisherInputPanel = new JPanel();

private String keywords;
private JTextField keywordsTextField = new JTextField(" ", 17);
private JLabel keywordsFieldLabel = new JLabel("Description Keywords:");
private JPanel keywordsInputPanel = new JPanel();

private String startYearString;
private JTextField startYearTextField = new JTextField(" ", 22);
private JLabel startYearFieldLabel = new JLabel("Start Year:       ");
private JPanel startYearInputPanel = new JPanel();

private String endYearString;
private JTextField endYearTextField = new JTextField(" ", 22);
private JLabel endYearFieldLabel = new JLabel("End Year:         ");
private JPanel endYearInputPanel = new JPanel();

private class SaveOnExit extends WindowAdapter
    {
        public void windowClosing(WindowEvent e)
        {
            System.out.println("EXITTING PROGRAM");
        if (filenameGiven){
            eStore.writeProductListToFile(eStore.productList, fileName);
        }
        System.exit(0);
        }
    } //End of inner class CheckOnExit

private class ResetButtonListener implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        // set all textfields to null
        typeComboBox.setSelectedIndex(0);
        productIDTextField.setText(" ");
        descriptionTextField.setText((" "));
        priceTextField.setText(" ");
        yearTextField.setText(" ");
        authorsTextField.setText(" ");
        publisherTextField.setText(" ");
        makerTextField.setText(" ");
        // empty output display
        outputDisplay.setText("Reset");
        // set all parameters to default
        productID = null;
        description = null;
        priceString = null;
        yearString = null;
        authors = null;
        publisher = null;
        maker = null;

        if (menuOption == 2){
            authorsInputPanel.setVisible(false);
            publisherInputPanel.setVisible(false);
        }

    }
} // End of BlueListener inner class

private class SubmitButtonListener implements ActionListener {
    StringTokenizer getFirstToken;

    public void actionPerformed(ActionEvent e) {
        // empty output display

        // ADD
        if (menuOption == 1) {
            
            getFirstToken = new StringTokenizer(productIDTextField.getText());
            productID = getFirstToken.nextToken();
            description = descriptionTextField.getText();
            getFirstToken = new StringTokenizer(priceTextField.getText());
            priceString = getFirstToken.nextToken();
            getFirstToken = new StringTokenizer(yearTextField.getText());
            yearString = getFirstToken.nextToken();
            


            if (typeComboBox.getSelectedIndex() == 0) { // if type is "Book"
                authors = authorsTextField.getText();
                publisher = publisherTextField.getText();
                maker = null;
                try {
                    eStore.addItemToInventory(eStore, keyWordHash, outputDisplay, true, productID, description, priceString, yearString, authors, publisher, maker);
                } catch (Exception m) {
                    outputDisplay.append("\nProduct was not added to inventory.\n");
                    return;
                }
               
            } else if (typeComboBox.getSelectedIndex() == 1) { // if type is "Electronic"
                maker = makerTextField.getText();
                authors = null;
                publisher = null;
                try {
                    eStore.addItemToInventory(eStore, keyWordHash, outputDisplay, false, productID, description, priceString, yearString, authors, publisher, maker);
                } catch (Exception m) {
                    outputDisplay.append("\nProduct was not added to inventory.\n");
                    return;
                }
               
            }
     
            // set all textfields to null
            typeComboBox.setSelectedIndex(0);
            productIDTextField.setText(" ");
            descriptionTextField.setText((" "));
            priceTextField.setText(" ");
            yearTextField.setText(" ");
            authorsTextField.setText(" ");
            publisherTextField.setText(" ");
            makerTextField.setText(" ");
            
            keywordsTextField.setText(" ");
            startYearTextField.setText(" ");
            endYearTextField.setText(" ");

            
             
        } else if (menuOption == 2) {
            if (eStore.productList.size() == 0){
                outputDisplay.setText("Inventory list is empty. ");
                return;
            }

   
            outputDisplay.setText("\nHERE!\n");
            
            
            if (productIDTextField.getText().isBlank()){
                outputDisplay.append("No search prodID\n");
                productID = null;
            }
            else {
                getFirstToken = new StringTokenizer(productIDTextField.getText());
                productID = getFirstToken.nextToken();
            }
            
            if (startYearTextField.getText().isBlank()){
                startYearString = null;
                outputDisplay.append("No search startYear\n");
            }
            else {
                getFirstToken = new StringTokenizer(startYearTextField.getText());
                startYearString = getFirstToken.nextToken();
            }
            if (endYearTextField.getText().isBlank()) {
                endYearString = null;
                outputDisplay.append("No search startYear\n");
            }
            else{
                getFirstToken = new StringTokenizer(endYearTextField.getText());
                endYearString = getFirstToken.nextToken();
            }
            getFirstToken = new StringTokenizer(keywordsTextField.getText());
            if (getFirstToken.hasMoreTokens()){
                keywords = keywordsTextField.getText();
            }
            else {
                keywords = null;
            }
            

            eStore.searchForProduct( eStore, keyWordHash, outputDisplay, productID, keywords, startYearString, endYearString);

             // set all textfields to null
            productIDTextField.setText(" ");
            keywordsTextField.setText(" ");
            startYearTextField.setText(" ");
            endYearTextField.setText(" ");
        }

        productID = null;
        description = null;      
        authors = null;
        publisher = null;
        maker = null;
        keywords = null;
        startYearString = null;
        endYearString = null;

    }
} // End of BlueListener inner class

private class AddCommandListener implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        menuOption = 1;
        submitButton.setText("Add");
        outputDisplayTitle.setText("Messages");
        outputDisplay.setText("");

        introScreenPanel.setVisible(false);
        addProductPanel.setVisible(true);

        typeInputPanel.setVisible(true);
        
        productIDInputPanel.setVisible(true);
        descriptionInputPanel.setVisible(true);
        priceInputPanel.setVisible(true);
        yearInputPanel.setVisible(true);
        typeComboBox.setSelectedIndex(0);
        if (typeComboBox.getSelectedIndex() == 0){
            authorsInputPanel.setVisible(true);
            publisherInputPanel.setVisible(true);
            makerInputPanel.setVisible(false);
        }
        else if (typeComboBox.getSelectedIndex() == 1){
            authorsInputPanel.setVisible(false);
            publisherInputPanel.setVisible(false);
            makerInputPanel.setVisible(true);
        }
        
        keywordsInputPanel.setVisible(false);
        startYearInputPanel.setVisible(false);
        endYearInputPanel.setVisible(false);
    }
} // End of BlueListener inner class

private class SearchCommandListener implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        System.out.println("SEARCH PRODUCT OPTION");
        menuOption = 2;
        submitButton.setText("Search");
        outputDisplayTitle.setText("Search Results");
        outputDisplay.setText("Only works when both keyword and description have values enetered. Sorry.");

        introScreenPanel.setVisible(false);
        addProductPanel.setVisible(true);

        typeInputPanel.setVisible(false);
        
        productIDInputPanel.setVisible(true);
        descriptionInputPanel.setVisible(false);
        priceInputPanel.setVisible(false);
        yearInputPanel.setVisible(false);
        
        authorsInputPanel.setVisible(false);
        publisherInputPanel.setVisible(false);
        makerInputPanel.setVisible(false);
        
        
        keywordsInputPanel.setVisible(true);
        startYearInputPanel.setVisible(true);
        endYearInputPanel.setVisible(true);
    }
} // End of BlueListener inner class

private class ExitCommandListener implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        System.out.println("EXIT PROGRAM OPTION");
        menuOption = 3;
        if (filenameGiven){
            eStore.writeProductListToFile(eStore.productList, fileName);
        }
        System.exit(0);
    }
} // End of BlueListener inner class

private class TypeComboBoxListener implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        JComboBox cb = (JComboBox) e.getSource();
        String typeSelected = (String) cb.getSelectedItem();
        if (typeSelected.equals("Book")) {
            makerInputPanel.setVisible(false);
            authorsInputPanel.setVisible(true);
            publisherInputPanel.setVisible(true);
        } else {
            makerInputPanel.setVisible(true);
            authorsInputPanel.setVisible(false);
            publisherInputPanel.setVisible(false);
        }

    }
} // End of BlueListener inner class


/** 
 * @param args
 */
public static void main(String[] args) {

    if (args.length == 1) {
        filenameGiven = true;
        fileName = args[0];
        System.out.println("FileName Included in commandLine");
        System.out.println("fileNameIs:  " + args[0]);
        eStore.readProductListFromFile(eStore, args[0], keyWordHash);
    }
    
EStoreSearch gui = new EStoreSearch();
gui.setVisible(true);

}




public EStoreSearch( )
{
super("eStoreSearch");
setSize(WIDTH, HEIGHT);


setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
addWindowListener(new SaveOnExit());

 

typeInputPanel.setLayout(new FlowLayout());
typeInputPanel.add(typeFieldLabel);
typeInputPanel.add(typeComboBox);

productIDInputPanel.setLayout(new FlowLayout());
productIDInputPanel.add(productIDFieldLabel);
productIDInputPanel.add(productIDTextField);

descriptionInputPanel.setLayout(new FlowLayout());
descriptionInputPanel.add(descriptionFieldLabel);
descriptionInputPanel.add(descriptionTextField);

priceInputPanel.setLayout(new FlowLayout());
priceInputPanel.add(priceFieldLabel);
priceInputPanel.add(priceTextField);

yearInputPanel.setLayout(new FlowLayout());
yearInputPanel.add(yearFieldLabel);
yearInputPanel.add(yearTextField);

makerInputPanel.setLayout(new FlowLayout());
makerInputPanel.add(makerFieldLabel);
makerInputPanel.add(makerTextField);
makerInputPanel.setVisible(false);

authorsInputPanel.setLayout(new FlowLayout());
authorsInputPanel.add(authorsFieldLabel);
authorsInputPanel.add(authorsTextField);
authorsInputPanel.setVisible(true);

publisherInputPanel.setLayout(new FlowLayout());
publisherInputPanel.add(publisherFieldLabel);
publisherInputPanel.add(publisherTextField);
publisherInputPanel.setVisible(true);

keywordsInputPanel.setLayout(new FlowLayout());
keywordsInputPanel.add(keywordsFieldLabel);
keywordsInputPanel.add(keywordsTextField);


startYearInputPanel.setLayout(new FlowLayout());
startYearInputPanel.add(startYearFieldLabel);
startYearInputPanel.add(startYearTextField);

endYearInputPanel.setLayout(new FlowLayout());
endYearInputPanel.add(endYearFieldLabel);
endYearInputPanel.add(endYearTextField);



introScreenPanel = new JPanel();
introScreenPanel.setLayout(new FlowLayout());

    welcomeMessage = new JTextArea(10, 60);
    welcomeMessage.setEditable(false);
    welcomeMessage.setWrapStyleWord(true);
    welcomeMessage.setMargin(new Insets(18,18,18,18));
    welcomeMessage.setText("\nWelcome to eStoreSearch\n\n\n" +
                "Choose a command from the 'Commands' menu above for" +
                " adding a product, searching products, or quitting the program.");
    introScreenPanel.add(welcomeMessage, BorderLayout.CENTER);
add(introScreenPanel);
setVisible(true);





outputDisplayPanel = new JPanel();
outputDisplayPanel.setLayout(new BorderLayout());
outputDisplayPanel.setBackground(Color.lightGray);
    outputDisplayTitle = new JLabel("Output Display");
    outputDisplayTitle.setText("Messages: ");

    outputDisplay = new JTextArea(80, 100);
    outputDisplay.setBackground(Color.white);
    outputDisplay.setWrapStyleWord(true);
    outputDisplay.setEditable(false);

    outputScrollPane = new JScrollPane(outputDisplay);
    outputScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    outputScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
    outputDisplayPanel.add(outputDisplayTitle, BorderLayout.NORTH);
    outputDisplayPanel.add(outputScrollPane, BorderLayout.CENTER);


buttonEnterPanel = new JPanel();
    buttonEnterPanel.setLayout(new BoxLayout(buttonEnterPanel, BoxLayout.Y_AXIS));
    resetButton = new JButton("Reset");
    resetButton.addActionListener(new ResetButtonListener());
    submitButton = new JButton("Submit");
    submitButton.addActionListener(new SubmitButtonListener());

    buttonEnterPanel.add(resetButton);
    buttonEnterPanel.add(submitButton);




addProductPanel = new JPanel();
addProductPanel.setBackground(Color.cyan);
addProductPanel.setLayout(new GridLayout(2,1));

    addInputPanel = new JPanel();
    addInputPanel.setLayout(new GridLayout(1,2));

        addTextFieldPanel = new JPanel();
        addTextFieldPanel.setLayout(new BoxLayout(addTextFieldPanel, BoxLayout.Y_AXIS));
            addTitleLabel = new JLabel();   
            addTitleLabel.setText("Adding a Product...");
            
        addTextFieldPanel.add(addTitleLabel);
            typeComboBox.setSelectedIndex(0);
            typeComboBox.addActionListener(new TypeComboBoxListener());
        addTextFieldPanel.add(typeInputPanel);
        addTextFieldPanel.add(productIDInputPanel);
        addTextFieldPanel.add(descriptionInputPanel);
        addTextFieldPanel.add(priceInputPanel);
        addTextFieldPanel.add(yearInputPanel);
        addTextFieldPanel.add(makerInputPanel);
        addTextFieldPanel.add(authorsInputPanel);
        addTextFieldPanel.add(publisherInputPanel);


        addTextFieldPanel.add(keywordsInputPanel);
        addTextFieldPanel.add(startYearInputPanel);
        addTextFieldPanel.add(endYearInputPanel);


    addInputPanel.add(addTextFieldPanel);
    addInputPanel.add(buttonEnterPanel);

addProductPanel.add(addInputPanel);
addProductPanel.add(outputDisplayPanel);


add(addProductPanel);
addProductPanel.setVisible(false);
setVisible(false);



   JMenu commandsMenu = new JMenu("Commands");

        JMenuItem addChoice = new JMenuItem("Add");
        addChoice.addActionListener(new AddCommandListener());
        commandsMenu.add(addChoice);

        JMenuItem searchChoice = new JMenuItem("Search");
        searchChoice.addActionListener(new SearchCommandListener());
        commandsMenu.add(searchChoice);

        JMenuItem quitChoice = new JMenuItem("Quit");
        quitChoice.addActionListener(new ExitCommandListener());
        commandsMenu.add(quitChoice);

        JMenuBar menuBar = new JMenuBar( );
        menuBar.add(commandsMenu);
        setJMenuBar(menuBar);




}



    
    /** 
     * @param e
     */
    public void actionPerformed(ActionEvent e)
    {
    } 

}
